# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qJwR3_fTQLqePBjFWzxgrsYdHHw1sXJ3
"""

import pandas as pd

df = pd.read_csv('/content/IMBD.csv')
df.head()
df.info()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Load data
df = pd.read_csv('/content/IMBD.csv')

# Gabungkan 'genre' dan 'description' untuk konten analisis
df['content'] = df['genre'] + " " + df['description']

# Buat vektor TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['content'].fillna(""))

# Hitung cosine similarity antar drakor
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Buat mapping: judul -> index
indices = pd.Series(df.index, index=df['title']).drop_duplicates()

# Fungsi rekomendasi
def recommend(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # Top 5 rekomendasi
    drakor_indices = [i[0] for i in sim_scores]
    return df[['title', 'genre', 'description']].iloc[drakor_indices]

def recommend(title, cosine_sim=cosine_sim):
    # Cari index dari judul yang dimasukkan
    idx = indices[title]

    # Ambil skor kemiripan untuk semua drakor terhadap yang dipilih
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan berdasarkan skor tertinggi
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Ambil 5 film teratas selain dirinya sendiri
    sim_scores = sim_scores[1:6]

    # Ambil indexnya
    drakor_indices = [i[0] for i in sim_scores]

    # Tampilkan judul-judulnya
    return df['title'].iloc[drakor_indices]

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import streamlit as st

# --- Load Data ---
df = pd.read_csv("IMBD.csv")

# --- Cek kolom yang dipakai ---
# Kita gabungkan genre + description sebagai 'content'
df['description'] = df['description'].fillna('')  # Hindari NaN
df['genre'] = df['genre'].fillna('')

# Gabungkan jadi satu kolom content
df['content'] = df['genre'] + " " + df['description']

# --- TF-IDF Vectorization ---
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['content'])

# --- Cosine Similarity antar drama ---
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# --- Mapping title ke index dataframe ---
indices = pd.Series(df.index, index=df['title']).drop_duplicates()

# --- Fungsi Rekomendasi ---
def recommend(title, cosine_sim=cosine_sim):
    if title not in indices:
        return ["Judul tidak ditemukan. Coba periksa kembali."]

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # Ambil 5 teratas

    drama_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[drama_indices].tolist()

# --- Streamlit UI ---
st.title("ðŸŽ¬ Sistem Rekomendasi Drakor")
user_input = st.text_input("Masukkan judul drama Korea yang kamu suka:")

if st.button("Rekomendasikan"):
    if user_input:
        recommendations = recommend(user_input)
        st.write("Rekomendasi drama Korea untukmu:")
        for i, rec in enumerate(recommendations, 1):
            st.write(f"{i}. {rec}")
    else:
        st.warning("Masukkan dulu judul drakornya ya~")

